/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2023-11-11 15:28:16.493371
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((0.106)*x1);
x13=((0.11315)*x5);
x14=((0.4115)*x1);
x15=((1.0)*x2);
x16=((0.11315)*x6);
x17=((0.106)*x0);
x18=((4.0e-8)*x4);
x19=((4.0e-8)*x1);
x20=((1.7e-7)*x1);
x21=((1.0)*x1);
x22=((4.0e-8)*x0);
x23=((1.0)*x0);
x24=(x10*x3);
x25=(x10*x4);
x26=(x0*x9);
x27=(x2*x3);
x28=(x3*x4);
x29=(x10*x9);
x30=(x10*x11);
x31=(x10*x2);
x32=((-1.0)*x9);
x33=(x0*x11);
x34=(x0*x2);
x35=((1.0)*x28);
x36=(x0*x1*x4);
x37=((((-1.0)*x1*x15))+x35);
x38=((((-1.0)*x21*x4))+(((-1.0)*x15*x3)));
x39=(x37*x5);
x40=(((x1*x34))+(((-1.0)*x23*x28)));
x41=((((-1.0)*x24*x4))+((x1*x31)));
x42=(x38*x6);
x43=(x0*(((((-1.0)*x21*x4))+(((-1.0)*x15*x3)))));
x44=((((-1.0)*x21*x25))+(((-1.0)*x15*x24)));
x45=(x41*x6);
x46=(((x6*(((((-1.0)*x35))+((x1*x2))))))+((x38*x5)));
x47=(x39+x42);
x48=(((x40*x5))+((x6*((((x0*x27))+x36)))));
x49=(((x6*((((x1*x25))+((x2*x24))))))+((x41*x5)));
x50=(((x40*x6))+((x43*x5)));
x51=(x45+((x44*x5)));
x52=(x50*x9);
eerot[0]=(((x48*x8))+((x7*(((((-1.0)*x30))+x52)))));
eerot[1]=(((x48*x7))+((x8*((((x32*x50))+(((1.0)*x30)))))));
eerot[2]=(((x11*x50))+x29);
IkReal x53=(x0*x4);
IkReal x54=(x0*x18);
eetrans[0]=((((0.429)*x0*x3))+((x0*x20))+((x14*x53))+((x11*((((x16*x40))+((x13*x43))))))+((x5*(((((-1.0)*x17*x28))+((x12*x34))))))+(((0.4115)*x0*x27))+(((0.1223)*x10))+(((0.11315)*x29))+((x5*((((x22*x27))+((x1*x54))))))+((x6*((((x12*x53))+((x17*x27))))))+((x6*((((x3*x54))+(((-1.0)*x19*x34)))))));
eerot[3]=(((x7*((((x51*x9))+x33))))+((x49*x8)));
eerot[4]=(((x49*x7))+((x8*(((((-1.0)*x33))+((x32*x51)))))));
eerot[5]=(((x11*x51))+(((-1.0)*x23*x9)));
IkReal x55=(x2*x24);
eetrans[1]=((((-0.1223)*x0))+((x11*((((x16*x41))+((x13*x44))))))+(((-0.11315)*x26))+((x6*((((x18*x24))+(((-1.0)*x19*x31))))))+((x14*x25))+((x5*((((x1*x10*x18))+(((4.0e-8)*x55))))))+(((0.4115)*x55))+((x6*(((((0.106)*x55))+((x12*x25))))))+(((0.429)*x24))+((x10*x20))+((x5*(((((-0.106)*x24*x4))+((x12*x31)))))));
eerot[6]=(((x46*x8))+((x47*x7*x9)));
eerot[7]=(((x8*x9*(((((-1.0)*x39))+(((-1.0)*x42))))))+((x46*x7)));
eerot[8]=(x11*x47);
eetrans[2]=((0.1452)+(((0.429)*x1))+(((-0.4115)*x28))+(((-1.7e-7)*x3))+((x14*x2))+((x6*(((((-0.106)*x28))+((x12*x2))))))+((x11*((((x16*x38))+((x13*x37))))))+((x5*(((((-1.0)*x18*x3))+((x19*x2))))))+((x6*(((((4.0e-8)*x27))+((x1*x18))))))+((x5*(((((-1.0)*x12*x4))+(((-0.106)*x27)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.11315)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.11315)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.1452)+(((-0.11315)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x56=((1.0)*px);
IkReal x57=((1.0)*pz);
IkReal x58=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x58))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x57)));
rxp0_2=((((-1.0)*r10*x56))+((py*r00)));
rxp1_0=((((-1.0)*r21*x58))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x57)));
rxp1_2=((((-1.0)*r11*x56))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x58)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x57)));
rxp2_2=((((-1.0)*r12*x56))+((py*r02)));
{
IkReal j1eval[2];
j1eval[0]=((IKabs(px))+(IKabs(py)));
j1eval[1]=((px*px)+(py*py));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x61 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x61.valid){
continue;
}
IkReal x59=((1.0)*(x61.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x62=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x62.valid){
continue;
}
if( (((0.1223)*(x62.value))) < -1-IKFAST_SINCOS_THRESH || (((0.1223)*(x62.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x60=IKasin(((0.1223)*(x62.value)));
j1array[0]=((((-1.0)*x59))+(((-1.0)*x60)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+x60+(((-1.0)*x59)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x63=cj1*cj1;
IkReal x64=r00*r00;
IkReal x65=r01*r01;
IkReal x66=(r00*sj1);
IkReal x67=(cj1*r10);
IkReal x68=(r01*sj1);
IkReal x69=(cj1*r11);
IkReal x70=((4.0)*x65);
IkReal x71=((4.0)*x63);
CheckValue<IkReal> x76=IKPowWithIntegerCheck((x68+(((-1.0)*x69))),-1);
if(!x76.valid){
continue;
}
IkReal x72=x76.value;
IkReal x73=(x66*x72);
IkReal x74=((1.0)*x67*x72);
if(((((x71*(r11*r11)))+(((4.0)*x64))+(((-1.0)*x63*x70))+(((-8.0)*x66*x67))+(((-8.0)*x68*x69))+x70+((x71*(r10*r10)))+(((-1.0)*x64*x71)))) < -0.00001)
continue;
IkReal x75=((0.5)*x72*(IKsqrt((((x71*(r11*r11)))+(((4.0)*x64))+(((-1.0)*x63*x70))+(((-8.0)*x66*x67))+(((-8.0)*x68*x69))+x70+((x71*(r10*r10)))+(((-1.0)*x64*x71))))));
j6array[0]=((2.0)*(atan(((((-1.0)*x74))+x75+x73))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((-2.0)*(atan(((((-1.0)*x73))+x75+x74))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

{
IkReal j4eval[1];
j4eval[0]=((((0.5)*(IKabs(((-0.00575271783575163)+(((-4.32157714560068e-8)*cj1*rxp0_1*sj6))+(((1.07406327600017)*cj1*cj6*pp*r11))+(((1.07406327600017)*cj1*pp*r10*sj6))+(((-4.32157714560068e-8)*cj1*cj6*rxp1_1))+(((-1.07406327600017)*cj6*pp*r01*sj1))+(((2.14812655200034)*cj6*npy*px*sj1))+(((-1.07406327600017)*pp*r00*sj1*sj6))+(((4.32157714560068e-8)*cj6*rxp1_0*sj1))+(((2.14812655200034)*npx*px*sj1*sj6))+(((-2.14812655200034)*cj1*cj6*npy*py))+(((4.32157714560068e-8)*rxp0_0*sj1*sj6))+(((-2.14812655200034)*cj1*npx*py*sj6))+(((-0.540197143200085)*pp)))))))+(((0.5)*(IKabs(((-2.37110532721957e-8)+(((0.592776331804893)*rxp0_0*sj1*sj6))+(((0.592776331804893)*cj6*rxp1_0*sj1))+(((-0.592776331804893)*cj1*rxp0_1*sj6))+(((-0.592776331804893)*cj1*cj6*rxp1_1)))))))+(((0.5)*(IKabs(((-0.0777890069985923)+(((5.88931200000092e-8)*cj1*cj6*rxp1_1))+(((-5.88931200000092e-8)*cj6*rxp1_0*sj1))+(((0.736164000000116)*pp))+(((5.88931200000092e-8)*cj1*rxp0_1*sj6))+(((0.449796204000071)*npx*sj6))+(((0.449796204000071)*cj6*npy))+(((-5.88931200000092e-8)*rxp0_0*sj1*sj6)))))))+(((0.5)*(IKabs(((0.0256644277499077)+(((-4.32157714560068e-8)*cj1*rxp0_1*sj6))+(((0.275325336000043)*cj1*cj6*npy*py))+(((-4.32157714560068e-8)*cj1*cj6*rxp1_1))+(((0.137662668000022)*pp*r00*sj1*sj6))+(((-0.275325336000043)*cj6*npy*px*sj1))+(((4.32157714560068e-8)*cj6*rxp1_0*sj1))+(((-0.137662668000022)*cj1*pp*r10*sj6))+(((-0.137662668000022)*cj1*cj6*pp*r11))+(((-0.275325336000043)*npx*px*sj1*sj6))+(((0.275325336000043)*cj1*npx*py*sj6))+(((0.137662668000022)*cj6*pp*r01*sj1))+(((4.32157714560068e-8)*rxp0_0*sj1*sj6))+(((-0.540197143200085)*pp)))))))+(((0.5)*(IKabs(((0.0235188791322634)+(((-1.76679360000028e-7)*cj6*rxp1_0*sj1))+(((2.20849200000035)*pp))+(((-1.07406327600017)*npx*sj6))+(((1.76679360000028e-7)*cj1*rxp0_1*sj6))+(((-1.76679360000028e-7)*rxp0_0*sj1*sj6))+(((-1.07406327600017)*cj6*npy))+(((1.76679360000028e-7)*cj1*cj6*rxp1_1)))))))+(((0.5)*(IKabs(((-0.104924070931757)+(((-1.76679360000028e-7)*cj6*rxp1_0*sj1))+(((2.20849200000035)*pp))+(((0.137662668000022)*cj6*npy))+(((1.76679360000028e-7)*cj1*rxp0_1*sj6))+(((-1.76679360000028e-7)*rxp0_0*sj1*sj6))+(((1.76679360000028e-7)*cj1*cj6*rxp1_1))+(((0.137662668000022)*npx*sj6)))))))+(IKabs(((-1.18555266360979e-8)+(((0.296388165902447)*rxp0_0*sj1*sj6))+(((-0.296388165902447)*cj1*cj6*rxp1_1))+(((-0.296388165902447)*cj1*rxp0_1*sj6))+(((0.296388165902447)*cj6*rxp1_0*sj1)))))+(IKabs(((4.84690377600076e-8)+(((-1.21172594400019)*rxp0_0*sj1*sj6))+(((1.21172594400019)*cj1*cj6*rxp1_1))+(((-1.21172594400019)*cj6*rxp1_0*sj1))+(((1.21172594400019)*cj1*rxp0_1*sj6)))))+(((0.5)*(IKabs(((0.0190271911118557)+(((-1.44052571520023e-8)*cj1*cj6*rxp1_1))+(((0.449796204000071)*cj6*pp*r01*sj1))+(((-0.899592408000141)*npx*px*sj1*sj6))+(((0.449796204000071)*pp*r00*sj1*sj6))+(((-0.899592408000141)*cj6*npy*px*sj1))+(((0.899592408000141)*cj1*npx*py*sj6))+(((-1.44052571520023e-8)*cj1*rxp0_1*sj6))+(((0.899592408000141)*cj1*cj6*npy*py))+(((1.44052571520023e-8)*cj6*rxp1_0*sj1))+(((-0.449796204000071)*cj1*cj6*pp*r11))+(((-0.180065714400028)*pp))+(((1.44052571520023e-8)*rxp0_0*sj1*sj6))+(((-0.449796204000071)*cj1*pp*r10*sj6)))))))+(((0.5)*(IKabs(((9.69380755200152e-8)+(((-2.42345188800038)*rxp0_0*sj1*sj6))+(((2.42345188800038)*cj1*cj6*rxp1_1))+(((-2.42345188800038)*cj6*rxp1_0*sj1))+(((2.42345188800038)*cj1*rxp0_1*sj6))))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j2, j3, j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x77=((2.20849200000035)*pp);
IkReal x78=((0.736164000000116)*pp);
IkReal x79=(cj6*npy);
IkReal x80=(npx*sj6);
IkReal x81=(cj6*rxp1_0*sj1);
IkReal x82=(cj1*cj6*rxp1_1);
IkReal x83=(cj1*rxp0_1*sj6);
IkReal x84=(rxp0_0*sj1*sj6);
IkReal x85=((1.76679360000028e-7)*x83);
IkReal x86=((1.76679360000028e-7)*x82);
IkReal x87=((1.76679360000028e-7)*x81);
IkReal x88=((1.76679360000028e-7)*x84);
IkReal x89=((5.88931200000092e-8)*x82);
IkReal x90=((5.88931200000092e-8)*x83);
IkReal x91=((5.88931200000092e-8)*x84);
IkReal x92=((5.88931200000092e-8)*x81);
IkReal x93=(x91+x92);
IkReal x94=(x88+x87);
IkReal x95=(x77+x86+x85);
IkReal x96=(x78+x89+x90);
IkReal x97=((4.84690377600076e-8)+(((1.21172594400019)*x83))+(((1.21172594400019)*x82))+(((-1.21172594400019)*x81))+(((-1.21172594400019)*x84)));
op[0]=((-0.0777890069985923)+(((0.449796204000071)*x80))+x96+(((-1.0)*x93))+(((0.449796204000071)*x79)));
op[1]=x97;
op[2]=((-0.104924070931757)+(((0.137662668000022)*x79))+(((0.137662668000022)*x80))+x95+(((-1.0)*x94)));
op[3]=((9.69380755200152e-8)+(((2.42345188800038)*x83))+(((2.42345188800038)*x82))+(((-2.42345188800038)*x81))+(((-2.42345188800038)*x84)));
op[4]=((0.0235188791322634)+(((-1.07406327600017)*x79))+(((-1.07406327600017)*x80))+x95+(((-1.0)*x94)));
op[5]=x97;
op[6]=((0.0506539430654279)+(((-0.76192974000012)*x80))+x96+(((-1.0)*x93))+(((-0.76192974000012)*x79)));
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x98=((0.540197143200085)*pp);
IkReal x99=((0.180065714400028)*pp);
IkReal x100=(pp*sj6);
IkReal x101=(r00*sj1);
IkReal x102=(cj1*sj6);
IkReal x103=((0.899592408000141)*py);
IkReal x104=(cj1*r10);
IkReal x105=(sj1*sj6);
IkReal x106=(cj1*cj6);
IkReal x107=(pp*r11);
IkReal x108=(npx*px);
IkReal x109=(npx*py);
IkReal x110=(npy*py);
IkReal x111=(cj6*rxp1_0*sj1);
IkReal x112=((1.44052571520023e-8)*x111);
IkReal x113=((1.44052571520023e-8)*rxp0_0*x105);
IkReal x114=((4.32157714560068e-8)*x111);
IkReal x115=((4.32157714560068e-8)*rxp0_0*x105);
IkReal x116=((4.32157714560068e-8)*rxp1_1*x106);
IkReal x117=((4.32157714560068e-8)*rxp0_1*x102);
IkReal x118=((1.44052571520023e-8)*rxp0_1*x102);
IkReal x119=((1.44052571520023e-8)*rxp1_1*x106);
IkReal x120=(cj6*pp*r01*sj1);
IkReal x121=(cj6*npy*px*sj1);
IkReal x122=(x113+x112);
IkReal x123=(x115+x114);
IkReal x124=(x119+x118+x99);
IkReal x125=(x117+x116+x98);
IkReal x126=((-1.18555266360979e-8)+(((0.296388165902447)*x111))+(((0.296388165902447)*rxp0_0*x105))+(((-0.296388165902447)*rxp1_1*x106))+(((-0.296388165902447)*rxp0_1*x102)));
j4evalpoly[0]=((-0.0123899544738037)+(((htj4*htj4*htj4*htj4)*(((0.0256644277499077)+(((-0.137662668000022)*x100*x104))+(((0.275325336000043)*x106*x110))+(((-0.137662668000022)*x106*x107))+(((-1.0)*x125))+x123+(((-0.275325336000043)*x121))+(((0.275325336000043)*x102*x109))+(((0.137662668000022)*x120))+(((-0.275325336000043)*x105*x108))+(((0.137662668000022)*x100*x101))))))+((x126*(htj4*htj4*htj4*htj4*htj4)))+(((-0.76192974000012)*x120))+(((htj4*htj4*htj4*htj4*htj4*htj4)*(((0.0190271911118557)+(((-0.449796204000071)*x100*x104))+(((-0.449796204000071)*x106*x107))+((npy*x103*x106))+(((-1.0)*x124))+x122+(((0.449796204000071)*x120))+((npx*x102*x103))+(((-0.899592408000141)*x121))+(((-0.899592408000141)*x105*x108))+(((0.449796204000071)*x100*x101))))))+(((-0.76192974000012)*x100*x101))+(((htj4*htj4)*(((-0.00575271783575163)+(((1.07406327600017)*x100*x104))+(((-2.14812655200034)*x106*x110))+(((-1.07406327600017)*x100*x101))+(((-1.0)*x125))+x123+(((-1.07406327600017)*x120))+(((2.14812655200034)*x105*x108))+(((2.14812655200034)*x121))+(((1.07406327600017)*x106*x107))+(((-2.14812655200034)*x102*x109))))))+(((-1.52385948000024)*x102*x109))+(((-1.0)*x124))+x122+((htj4*x126))+(((1.52385948000024)*x121))+(((0.76192974000012)*x106*x107))+(((-1.52385948000024)*x106*x110))+(((1.52385948000024)*x105*x108))+(((htj4*htj4*htj4)*(((-2.37110532721957e-8)+(((0.592776331804893)*rxp0_0*x105))+(((-0.592776331804893)*rxp1_1*x106))+(((0.592776331804893)*x111))+(((-0.592776331804893)*rxp0_1*x102))))))+(((0.76192974000012)*x100*x104)));
if( IKabs(j4evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x127=(cj4*sj6);
IkReal x128=((9.23707217413366e-7)*npx);
IkReal x129=((9.23707217413366e-7)*cj6);
IkReal x130=(cj1*sj4);
IkReal x131=(cj1*rxp0_1);
IkReal x132=(rxp1_0*sj1);
IkReal x133=(rxp0_0*sj1);
IkReal x134=((2.33100233100196)*npx);
IkReal x135=((2.33100233100196)*sj6);
IkReal x136=(sj4*sj6);
IkReal x137=(cj1*rxp1_1);
IkReal x138=((2.33100233100196)*cj6);
IkReal x139=(npy*x138);
IkReal x140=(cj4*x138);
if( IKabs(((-3.801055199656e-7)+(((-1.0)*sj4*x139))+(((-1.0)*x137*x140))+(((-1.0)*x134*x136))+(((-2.33100233100196)*x127*x131))+((sj4*x129*x132))+(((-1.0)*rxp1_1*x129*x130))+(((9.23707217413366e-7)*x133*x136))+(((0.247086247086171)*sj4))+((cj4*npy*x129))+(((-1.91153058285895e-7)*cj4))+((x132*x140))+(((-9.23707217413366e-7)*rxp0_1*sj6*x130))+(((2.33100233100196)*x127*x133))+((x127*x128)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.959207459207309)+((x127*x134))+((cj4*x129*x137))+(((-1.0)*rxp1_1*x130*x138))+(((-1.0)*rxp0_1*x130*x135))+((sj4*x132*x138))+(((-1.0)*cj4*x129*x132))+((sj4*x133*x135))+(((9.23707217413366e-7)*x127*x131))+((npy*sj4*x129))+((x128*x136))+(((-0.247086247086171)*cj4))+(((-9.23707217413366e-7)*x127*x133))+((cj4*x139))+(((-1.91153058285895e-7)*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.801055199656e-7)+(((-1.0)*sj4*x139))+(((-1.0)*x137*x140))+(((-1.0)*x134*x136))+(((-2.33100233100196)*x127*x131))+((sj4*x129*x132))+(((-1.0)*rxp1_1*x129*x130))+(((9.23707217413366e-7)*x133*x136))+(((0.247086247086171)*sj4))+((cj4*npy*x129))+(((-1.91153058285895e-7)*cj4))+((x132*x140))+(((-9.23707217413366e-7)*rxp0_1*sj6*x130))+(((2.33100233100196)*x127*x133))+((x127*x128))))+IKsqr(((-0.959207459207309)+((x127*x134))+((cj4*x129*x137))+(((-1.0)*rxp1_1*x130*x138))+(((-1.0)*rxp0_1*x130*x135))+((sj4*x132*x138))+(((-1.0)*cj4*x129*x132))+((sj4*x133*x135))+(((9.23707217413366e-7)*x127*x131))+((npy*sj4*x129))+((x128*x136))+(((-0.247086247086171)*cj4))+(((-9.23707217413366e-7)*x127*x133))+((cj4*x139))+(((-1.91153058285895e-7)*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-3.801055199656e-7)+(((-1.0)*sj4*x139))+(((-1.0)*x137*x140))+(((-1.0)*x134*x136))+(((-2.33100233100196)*x127*x131))+((sj4*x129*x132))+(((-1.0)*rxp1_1*x129*x130))+(((9.23707217413366e-7)*x133*x136))+(((0.247086247086171)*sj4))+((cj4*npy*x129))+(((-1.91153058285895e-7)*cj4))+((x132*x140))+(((-9.23707217413366e-7)*rxp0_1*sj6*x130))+(((2.33100233100196)*x127*x133))+((x127*x128))), ((-0.959207459207309)+((x127*x134))+((cj4*x129*x137))+(((-1.0)*rxp1_1*x130*x138))+(((-1.0)*rxp0_1*x130*x135))+((sj4*x132*x138))+(((-1.0)*cj4*x129*x132))+((sj4*x133*x135))+(((9.23707217413366e-7)*x127*x131))+((npy*sj4*x129))+((x128*x136))+(((-0.247086247086171)*cj4))+(((-9.23707217413366e-7)*x127*x133))+((cj4*x139))+(((-1.91153058285895e-7)*sj4))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x141=IKcos(j3);
IkReal x142=IKsin(j3);
IkReal x143=((1.0)*sj6);
IkReal x144=((1.0)*cj6);
IkReal x145=(cj6*sj1);
IkReal x146=((2.0)*px);
IkReal x147=(cj1*pp);
IkReal x148=(sj1*sj6);
IkReal x149=(cj4*x141);
IkReal x150=(cj4*x142);
IkReal x151=(sj4*x141);
IkReal x152=(sj4*x142);
IkReal x153=((2.0)*cj1*py);
evalcond[0]=((0.106)+(((0.429)*x149))+(((-0.429)*x152))+(((-1.0)*npy*x144))+(((-1.0)*npx*x143))+(((0.4115)*cj4))+(((1.7e-7)*x151))+(((1.7e-7)*x150)));
evalcond[1]=((0.37956654000003)+(((1.3991e-7)*x142))+(((0.087238)*cj4))+(((-0.0909479999999864)*x152))+(((7.036e-8)*x151))+(((7.036e-8)*x150))+(((0.0909479999999864)*x149))+(((-1.0)*pp))+(((0.353067)*x141))+(((3.292e-8)*sj4)));
evalcond[2]=((-4.0e-8)+(((-1.0)*cj1*rxp0_1*x143))+(((-0.429)*x150))+(((-0.429)*x151))+(((-1.7e-7)*x152))+(((-1.0)*cj1*rxp1_1*x144))+((rxp1_0*x145))+((rxp0_0*x148))+(((-0.4115)*sj4))+(((1.7e-7)*x149)));
evalcond[3]=((0.0259276)+(((-0.1049334)*x152))+(((-1.0)*npx*x146*x148))+(((-1.0)*r10*x143*x147))+(((0.1049334)*x149))+(((0.1006529)*cj4))+(((-1.0)*r11*x144*x147))+((pp*r00*x148))+((pp*r01*x145))+(((4.1582e-8)*x151))+(((4.1582e-8)*x150))+((cj6*npy*x153))+((npx*sj6*x153))+(((-1.0)*npy*x145*x146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x154=(sj3*sj4);
IkReal x155=(cj3*cj4);
IkReal x156=(cj6*r21);
IkReal x157=(cj3*sj4);
IkReal x158=(cj4*sj3);
IkReal x159=((8.17661488143908)*cj6*rxp1_2);
IkReal x160=((1.0)*r20*sj6);
IkReal x161=((8.17661488143908)*rxp0_2*sj6);
if( IKabs(((((-1.0)*x157*x160))+(((-1.0)*x158*x160))+((x154*x159))+((x154*x161))+(((-1.0)*x156*x157))+(((-1.0)*x156*x158))+(((-1.0)*x155*x159))+(((-1.0)*x155*x161)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x157*x161))+(((-1.0)*x154*x160))+(((-1.0)*x157*x159))+(((-1.0)*x158*x161))+((r20*sj6*x155))+(((-1.0)*x158*x159))+((x155*x156))+(((-1.0)*x154*x156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x157*x160))+(((-1.0)*x158*x160))+((x154*x159))+((x154*x161))+(((-1.0)*x156*x157))+(((-1.0)*x156*x158))+(((-1.0)*x155*x159))+(((-1.0)*x155*x161))))+IKsqr(((((-1.0)*x157*x161))+(((-1.0)*x154*x160))+(((-1.0)*x157*x159))+(((-1.0)*x158*x161))+((r20*sj6*x155))+(((-1.0)*x158*x159))+((x155*x156))+(((-1.0)*x154*x156))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x157*x160))+(((-1.0)*x158*x160))+((x154*x159))+((x154*x161))+(((-1.0)*x156*x157))+(((-1.0)*x156*x158))+(((-1.0)*x155*x159))+(((-1.0)*x155*x161))), ((((-1.0)*x157*x161))+(((-1.0)*x154*x160))+(((-1.0)*x157*x159))+(((-1.0)*x158*x161))+((r20*sj6*x155))+(((-1.0)*x158*x159))+((x155*x156))+(((-1.0)*x154*x156))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x162=IKsin(j2);
IkReal x163=IKcos(j2);
IkReal x164=((0.1223)*sj3);
IkReal x165=((1.5434e-7)*cj3);
IkReal x166=((0.1223)*cj3);
IkReal x167=((0.106)*sj3);
IkReal x168=((0.106)*cj3);
IkReal x169=((0.357094539999973)*cj3);
IkReal x170=(cj6*r21);
IkReal x171=((1.3738e-7)*sj3);
IkReal x172=((4.0e-8)*sj3);
IkReal x173=((0.0109874599999695)*sj3);
IkReal x174=(pp*sj6);
IkReal x175=(cj6*sj1);
IkReal x176=((1.0)*r11);
IkReal x177=((1.5434e-7)*sj3);
IkReal x178=((4.0e-8)*cj3);
IkReal x179=((2.0)*npy);
IkReal x180=(cj1*cj6);
IkReal x181=((1.0)*sj1);
IkReal x182=((1.0)*r01);
IkReal x183=((0.0184300399999727)*sj3);
IkReal x184=(cj1*px);
IkReal x185=((0.34965195999997)*cj3);
IkReal x186=((1.3738e-7)*cj3);
IkReal x187=(sj4*x163);
IkReal x188=(cj4*x163);
IkReal x189=(sj4*x162);
IkReal x190=((3.292e-8)*x163);
IkReal x191=(cj4*x162);
IkReal x192=((2.0)*npx*sj6);
IkReal x193=(cj3*x163);
IkReal x194=((0.4115)*x162);
IkReal x195=(sj3*x163);
IkReal x196=((3.292e-8)*x162);
IkReal x197=((1.0)*cj1*sj6);
IkReal x198=((0.087238)*x162);
evalcond[0]=(((sj3*x191))+((sj3*x187))+(((-1.0)*cj3*x188))+x170+((cj3*x189))+((r20*sj6)));
evalcond[1]=(((x166*x191))+((x164*x188))+((x166*x187))+((rxp0_2*sj6))+((cj6*rxp1_2))+(((-1.0)*x164*x189)));
evalcond[2]=((((-1.0)*x175*x176))+(((-1.0)*r00*x197))+((sj3*x188))+(((-1.0)*x180*x182))+((cj3*x191))+((cj3*x187))+(((-1.0)*sj3*x189))+(((-1.0)*r10*sj6*x181)));
evalcond[3]=((((-1.0)*rxp1_1*x175))+(((-1.0)*rxp0_1*sj6*x181))+((x166*x188))+(((-1.0)*rxp1_0*x180))+(((-1.0)*x164*x191))+(((-1.0)*x166*x189))+(((-1.0)*x164*x187))+(((-1.0)*rxp0_0*x197)));
evalcond[4]=((((-1.0)*x178*x191))+(((-1.0)*x178*x187))+((sj3*x194))+((x168*x189))+((x172*x189))+(((-0.4115)*x193))+((x167*x191))+(((-0.429)*x163))+(((-1.0)*x168*x188))+((x167*x187))+pz+(((1.7e-7)*x162))+(((-1.0)*x172*x188)));
evalcond[5]=((((-1.0)*x178*x188))+((x168*x191))+((x178*x189))+((x168*x187))+((x172*x187))+(((-1.0)*py*x181))+((x172*x191))+(((-1.0)*x184))+(((0.4115)*x195))+((x167*x188))+((cj3*x194))+(((1.7e-7)*x163))+(((-1.0)*x167*x189))+(((0.429)*x162)));
evalcond[6]=(((x177*x188))+((sj3*x190))+((x169*x189))+(((-1.0)*pz*x192))+(((-1.72e-9)*x162))+(((-1.0)*cj6*pz*x179))+(((-1.0)*x186*x191))+((x185*x188))+((r20*x174))+(((-1.3991e-7)*x191))+((cj3*x196))+((x171*x189))+((x165*x187))+(((-1.0)*sj3*x198))+(((0.087238)*x193))+((pp*x170))+(((0.353067)*x188))+(((0.353067)*x189))+(((-1.0)*x173*x187))+(((1.3991e-7)*x187))+((x183*x191))+(((0.0909480000000136)*x163)));
evalcond[7]=(((x169*x187))+(((-1.0)*x186*x188))+((x173*x189))+(((-1.72e-9)*x163))+((py*x175*x179))+((x184*x192))+(((-1.0)*pp*x175*x176))+(((-1.0)*r10*x174*x181))+(((-0.0909480000000136)*x162))+(((-1.0)*cj1*r00*x174))+(((-1.0)*x177*x191))+(((-1.3991e-7)*x188))+(((-1.3991e-7)*x189))+((cj3*x190))+((px*x179*x180))+((x171*x187))+(((-0.087238)*x195))+(((-1.0)*sj3*x196))+(((-1.0)*x185*x191))+(((-1.0)*x165*x189))+(((-0.353067)*x191))+(((-1.0)*pp*x180*x182))+((py*sj1*x192))+(((0.353067)*x187))+(((-1.0)*cj3*x198))+((x183*x188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
j5array[0]=0;
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j6;
vinfos[5].indices[0] = _ij6[0];
vinfos[5].indices[1] = _ij6[1];
vinfos[5].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}
    }

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+5, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+6, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - tm5-900 (a8d45b32f74fc4fbd44f36962797ffba)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
